// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: frontend.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FrontendService_SearchHotels_FullMethodName        = "/protobuf.FrontendService/SearchHotels"
	FrontendService_FrontendReservation_FullMethodName = "/protobuf.FrontendService/FrontendReservation"
)

// FrontendServiceClient is the client API for FrontendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Frontend service definition
type FrontendServiceClient interface {
	SearchHotels(ctx context.Context, in *SearchHotelsRequest, opts ...grpc.CallOption) (*SearchHotelsResponse, error)
	// rpc StoreHotel(StoreHotelRequest) returns (StoreHotelResponse);
	FrontendReservation(ctx context.Context, in *FrontendReservationRequest, opts ...grpc.CallOption) (*FrontendReservationResponse, error)
}

type frontendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontendServiceClient(cc grpc.ClientConnInterface) FrontendServiceClient {
	return &frontendServiceClient{cc}
}

func (c *frontendServiceClient) SearchHotels(ctx context.Context, in *SearchHotelsRequest, opts ...grpc.CallOption) (*SearchHotelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchHotelsResponse)
	err := c.cc.Invoke(ctx, FrontendService_SearchHotels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) FrontendReservation(ctx context.Context, in *FrontendReservationRequest, opts ...grpc.CallOption) (*FrontendReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FrontendReservationResponse)
	err := c.cc.Invoke(ctx, FrontendService_FrontendReservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontendServiceServer is the server API for FrontendService service.
// All implementations must embed UnimplementedFrontendServiceServer
// for forward compatibility.
//
// Frontend service definition
type FrontendServiceServer interface {
	SearchHotels(context.Context, *SearchHotelsRequest) (*SearchHotelsResponse, error)
	// rpc StoreHotel(StoreHotelRequest) returns (StoreHotelResponse);
	FrontendReservation(context.Context, *FrontendReservationRequest) (*FrontendReservationResponse, error)
	mustEmbedUnimplementedFrontendServiceServer()
}

// UnimplementedFrontendServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFrontendServiceServer struct{}

func (UnimplementedFrontendServiceServer) SearchHotels(context.Context, *SearchHotelsRequest) (*SearchHotelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchHotels not implemented")
}
func (UnimplementedFrontendServiceServer) FrontendReservation(context.Context, *FrontendReservationRequest) (*FrontendReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrontendReservation not implemented")
}
func (UnimplementedFrontendServiceServer) mustEmbedUnimplementedFrontendServiceServer() {}
func (UnimplementedFrontendServiceServer) testEmbeddedByValue()                         {}

// UnsafeFrontendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontendServiceServer will
// result in compilation errors.
type UnsafeFrontendServiceServer interface {
	mustEmbedUnimplementedFrontendServiceServer()
}

func RegisterFrontendServiceServer(s grpc.ServiceRegistrar, srv FrontendServiceServer) {
	// If the following call pancis, it indicates UnimplementedFrontendServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FrontendService_ServiceDesc, srv)
}

func _FrontendService_SearchHotels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchHotelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).SearchHotels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_SearchHotels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).SearchHotels(ctx, req.(*SearchHotelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_FrontendReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrontendReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).FrontendReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_FrontendReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).FrontendReservation(ctx, req.(*FrontendReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FrontendService_ServiceDesc is the grpc.ServiceDesc for FrontendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrontendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.FrontendService",
	HandlerType: (*FrontendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchHotels",
			Handler:    _FrontendService_SearchHotels_Handler,
		},
		{
			MethodName: "FrontendReservation",
			Handler:    _FrontendService_FrontendReservation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frontend.proto",
}
